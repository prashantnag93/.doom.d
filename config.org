#+TITLE: Literate doom-emacs config
#+AUTHOR: Prashant Kumar Nag (Shaan) <prashantnag.workmail@gmail.com>
#+DATE: 2020:04:09
#+PROPERTY: header-args:emacs-lisp :tangle yes :cache yes :results silent
#+OPTIONS: toc:nil

* Table Of Contents :Toc_3_gh:noexport:
- [[#personal-information][Personal Information]]
- [[#global-settings][Global Settings]]
  - [[#simple-settings][Simple settings]]
  - [[#screen-related][Screen related]]
  - [[#auto-customization][Auto-customization]]
  - [[#avy-all-windows][Avy all windows]]
  - [[#highlight-region][Highlight Region]]
  - [[#beacon-mode][Beacon mode]]
  - [[#which-key][Which-Key]]
- [[#completion][COMPLETION]]
- [[#ui][UI]]
  - [[#themes][Themes]]
  - [[#doom-dashbard][doom-dashbard]]
  - [[#deft][Deft]]
- [[#lang][LANG]]
  - [[#org][Org]]
    - [[#global-org-settings][Global org settings]]
    - [[#fancy-customisation][Fancy Customisation]]
    - [[#org-roam][Org-Roam]]
    - [[#org-roam-server][Org-Roam-Server]]
    - [[#org-journal][Org-Journal]]
    - [[#org-noter][Org-Noter]]
    - [[#org-capture-templates][org capture templates]]
    - [[#org-protocol-capture-html][Org Protocol Capture html]]
    - [[#helm-bibtex][Helm-Bibtex]]
    - [[#org-ref][Org-Ref]]
    - [[#org-roam-bibtex][Org-Roam-Bibtex]]
- [[#tools][TOOLS]]
  - [[#pdf][pdf]]

* Personal Information
Let's set some variables with basic user information.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Prashant Kumar Nag"
      user-mail-address "prashantnag.workmail@gmail.com")
#+END_SRC
* Global Settings
** Simple settings
Configuring the simple global setting for DOOM
#+begin_src emacs-lisp :tangle yes
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      inhibit-compacting-font-caches t            ; When there are lots of glyphs, keep them in memory
      truncate-string-ellipsis "…")               ; Unicode ellispis are nicer than "...", and also save /precious/ space

(delete-selection-mode 1)                         ; Replace selection when inserting text
(display-time-mode 1)                             ; Enable time in the mode-line
(display-battery-mode 1)                          ; On laptops it's nice to know how much power you have
(global-subword-mode 1)                           ; Iterate through CamelCase words
      ;; IMO, modern editors have trained a bad habit into us all: a burning
      ;; need for completion all the time -- as we type, as we breathe, as we
      ;; pray to the ancient ones -- but how often do you *really* need that
      ;; information? I say rarely. So opt for manual completion:
(set-language-environment-charset "UTF-8")

(global-auto-revert-mode t)
#+end_src
** Screen related
I also lien the idea of fullscreen-ing when opened ~emacs~
#+begin_src emacs-lisp
(if (eq initial-window-system 'x)                 ; if started by emacs command or desktop file
    (toggle-frame-maximized)
  (toggle-frame-fullscreen))
;; Buffer names modifications
(setq uniquify-buffer-name-style 'forward)
(setq which-key-idle-delay 0.5)
;; Switch to the new window after splitting
(setq evil-split-window-below t
      evil-vsplit-window-right t)
;; It will prompt for new buffer selection
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))
;;Following code will show the windows preview
(setq +ivy-buffer-preview t)
#+end_src
** Auto-customization
This will keep the customize settings into separate file.
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src
** Avy all windows
#+begin_src emacs-lisp :tangle yes
(setq avy-all-windows t)
#+end_src
** Highlight Region
#+begin_src emacs-lisp :tangle yes
(setq evil-goggles-duration 1
      evil-goggles-pulse t)
#+end_src
** Beacon mode
#+begin_src emacs-lisp :tangle yes
(beacon-mode 1)
(setq beacon-push-mark 10)
(setq beacon-blink-delay 0.3)
(setq beacon-blink-duration 0.3)
(setq beacon-color "#ae4cc7")
#+end_src
** Which-Key
#+begin_src emacs-lisp :tangle yes
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))
#+end_src
* COMPLETION
#+begin_src emacs-lisp :tangle yes
(after! ivy
  ;; I prefer search matching to be ordered; it's more precise
  (add-to-list 'ivy-re-builders-alist '(counsel-projectile-find-file . ivy--regex-plus)))
#+end_src
* UI
** Themes
This section is used for changing the doom themes.
#+begin_src emacs-lisp
(setq doom-theme 'doom-vibrant)
(setq doom-font (font-spec :family "Ubuntu Mono" :size 16 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "Source Code Pro" :size 16))
;; (setq doom-variable-pitch-font (font-spec :family "Overpass" :size 16))
#+end_src
** doom-dashbard
Let's change the dashboad with spalsh image.
#+begin_src emacs-lisp
(setq fancy-splash-image (concat doom-private-dir "banners/banner.png"))
#+end_src
** Deft
This will takes the settings for Deft.
#+begin_src emacs-lisp :tangle yes
;;(setq deft-directory "~/Dropbox/org/roam/Notes/")
(setq deft-recursive t)
(setq deft-use-filename-as-title t
      deft-auto-save-interval -1.0)
(setq deft-current-sort-method 'title)
#+end_src
* LANG
** Org
*** Global org settings
#+begin_src emacs-lisp
(setq
 org_notes "~/Dropbox/org/"
 zot_bib "~/Dropbox/org/Notes/Mylib.bib"
 org-directory org_notes
 deft-directory org_notes
 org-roam-directory org_notes
 )

(after! org
    (setq org-default-notes-file "~/Dropbox/org/gtd/inbox.org")
  (setq +org-capture-todo-file org-default-notes-file
        +org-capture-notes-file org-default-notes-file
        +org-capture-projects-file org-default-notes-file)

  (setq org-log-done 'time
        org-log-into-drawer t
        org-log-state-notes-insert-after-drawers nil))
#+end_src
**** org-tag-alist
#+begin_src emacs-lisp
  (setq org-tag-alist (quote ((:startgrouptag)
                              ("Context")
                              (:grouptags)
                              ("@errand" . ?e)
                              ("@manit" . ?m)
                              ("@home" . ?h)
                              (:endgrouptag)
                              (:startgrouptag)
                              ("Use this")
                              (:grouptags)
                              ("?phone" . ?p)
                              ("?laptop" . ?l)
                              (:endgrouptag)
                              (:startgrouptag)
                              ("Energy")
                              (:grouptags)
                              ("Challange" . ?1)
                              ("Average" . ?2)
                              ("Easy" . ?3)
                              (:endgrouptag)
                              (:startgrouptag)
                              ("Time")
                              (:grouptags)
                              ("15min" . ?<)
                              ("30min" . ?=)
                              ("1hr" . ?>)
                              (:endgrouptag)
                              (:startgrouptag)
                              ("Related")
                              (:grouptags)
                              ("#PhD" . ?P)
                              ("#coding" . ?C)
                              ("#knowledge" . ?K)
                              (:endgrouptag)
                              (:startgrouptag)
                              ("Status")
                              (:grouptags)
                              ("WAITING" . ?w)
                              ("HOLD" . ?H)
                              ("CANCELLED" . ?c)
                              (:endgrouptag)
                              (:startgrouptag . nil)
                              ("Category")
                              (:grouptags . nil)
                              ("Hobby")
                              ("Health")
                              ("House")
                              ("Bike")
                              ("Bills")
                              (:endgrouptag . nil))))
#+end_src
**** org-TODO-keywords
#+begin_src emacs-lisp :tangle yes
(after! org (setq org-todo-keywords
      '((sequence "TODO(t)" "PROJ(p!)" "NEXT(n!)" "SOMEDAY(s!)" "DELEGATED(e@/!)" "|" "DONE(d@/!)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "CANCELLED(c@/!)")
        (sequence "UNREAD(u!)" "READING(r!)" "READ(R@/!)")
        (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)"))))
#+end_src
**** Company-posframe
#+begin_src emacs-lisp :tangle yes
(use-package! company-posframe
  :hook (company-mode . company-posframe-mode))
#+end_src
*** Fancy Customisation
It’s also nice to change the character used for collapsed items (by default …), I think ▾ is better for indicating ‘collapsed section’.
#+begin_src emacs-lisp
(after! org
  (setq org-ellipsis "⤵" ;;▾
        org-startup-folded t
        org-src-fontify-natively t))
(setq org-highlight-latex-and-related '(latex))
#+end_src

*** Org-Roam
:PROPERTIES:
:ID:       fb29d93f-b194-499f-81bc-93b7bf7485ea
:END:
#+begin_src emacs-lisp
(after! org-roam
  (setq ;;org-roam-graph-viewer "/usr/bin/open"
   ;;org-roam-completion-system 'default
   ;;org-roam-link-title-format "§:%s"
   +org-roam-open-buffer-on-find-file nil
   org-roam-db-gc-threshold most-positive-fixnum
   org-roam-graph-exclude-matcher "private"
   org-roam-tag-sources '(prop last-directory)
   org-id-link-to-org-use-id t
   org-roam-graph-executable "/usr/bin/neato" ;; instead of 'dot' we can use 'neato' also
   )
  (setq org-roam-capture-templates
        '(("l" "literature" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "literature/%<%Y%m%d%H%M%S>-${slug}"
           :head "#+title: ${title}#+created: %u\n#+last_modified: %U\n\n"
           :unnarrowed t)
          ("c" "concept" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "concepts/%<%Y%m%d%H%M%S>-${slug}"
           :head "#+title: ${title}#+created: %u\n#+last_modified: %U\n\n"
           :unnarrowed t)
          ("p" "private" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "private/%<%Y%m%d%H%M%S>-${slug}"
           :head "#+title: ${title}#+created: %u\n#+last_modified: %U\n\n"
           :unnarrowed t)))

  (setq org-roam-capture-ref-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "websites/${slug}"
           :head "#+roam_key: ${ref}
,#+roam_tags: website
,#+title: ${title}

- source :: ${ref}"
           :unnarrowed t)))
  (set-company-backend! 'org-mode '(company-capf))
  )
#+end_src
*** Org-Roam-Server
#+begin_src emacs-lisp :tangle yes
(use-package! org-roam-server)
(add-hook 'org-roam-server-mode (lambda () (browse-url-firefox "http://localhost:8080")))
#+end_src
*** Org-Journal
#+begin_src emacs-lisp :tangle yes
(after! org-journal
   (setq
    org-journal-date-prefix "#+TITLE:"
   org-journal-date-format "%A, %d %B %Y"
   org-journal-file-format "%Y-%m-%d.org"
   org-journal-dir (file-truename "~/Dropbox/org/private/")
   org-journal-enable-encryption nil
   org-journal-enable-agenda-integration t))
#+end_src

*** Org-Noter
:PROPERTIES:
:ID:       45fcfc0b-8bd0-4bb6-9909-63de07be6ce7
:END:
#+begin_src emacs-lisp :tangle yes
(use-package! org-noter
  :after (:any org pdf-view)
  :config
  (setq
   ;; The WM can handle splits
   ;;org-noter-notes-window-location 'other-frame
   ;; Please stop opening frames
   org-noter-always-create-frame nil
   ;; I want to see the whole file
   org-noter-hide-other nil
   ;; Everything is relative to the main notes file
   org-noter-notes-search-path (list org_notes)
   )
  )
#+end_src
*** org capture templates
:PROPERTIES:
:ID:       1f419633-0084-48f4-8b65-5e20e185093b
:END:
#+begin_src emacs-lisp
;; Actually start using templates
(after! org-capture
  ;; Firefox
  (add-to-list 'org-capture-templates
               '("P" "Protocol" entry
                 (file+headline +org-capture-notes-file "Inbox")
                 "* %^{Title}\nSource: %u,\n #+BEGIN_QUOTE\n %i \n#+END_QUOTE\n\n\n%?"
                 :prepend t
                 :kill-buffer t))
  (add-to-list 'org-capture-templates
               '("R" "Reading" entry
                 (file+headline "~/Dropbox/org/gtd/reading.org" "Consepts for Reading")
                 "* TODO %? :#PhD:\n/Entered on/ %u\n"
                 :prepend t
                 :kill-buffer t))
  (add-to-list 'org-capture-templates
               '("K" "Keywords" entry
                 (file+headline "~/Dropbox/org/gtd/reading.org" "Keywords for Consepts")
                 "* TODO %? :#PhD:keywords:\n/Entered on/ %u\n%a\n"
                 :prepend t
                 :kill-buffer t))
  (add-to-list 'org-capture-templates
               '("c" "Keywords" entry
                 (file (get-journal-file-today))
                 "* TODO %?\n\n %i\n\n from: %a :#PhD:keywords:\n"
                 :prepend t
                 :kill-buffer t))
  ;; Misc
  (add-to-list 'org-capture-templates
               '("a"               ; key
                 "Article"         ; name
                 entry             ; type
                 (file+headline "~/Dropbox/org/gtd/inbox.org" "Article")  ; target
                 "* %^{Title} %(org-set-tags-command)  :article: \n:PROPERTIES:\n:Created: %U\n:Linked: %a\n:END:\n%i\nBrief description:\n%?"  ; template
                 :prepend t        ; properties
                 :empty-lines 1    ; properties
                 :created t        ; properties
                 ))
  )
;;
#+end_src
*** Org Protocol Capture html
:PROPERTIES:
:ID:       12d3627c-f5c3-4de4-8378-7a2c86051b5b
:END:
#+begin_src emacs-lisp :tangle yes
(use-package! org-protocol-capture-html
  :after org-protocol
  :config
  (add-to-list 'org-capture-templates
               '("w"
                 "Web site"
                 entry
                 (file+headline +org-capture-notes-file "Website")  ; target
                 "* %a :website:\n\n%U %?\n\n%:initial")
               )
  )
#+end_src

*** Helm-Bibtex
#+BEGIN_SRC emacs-lisp

(after! org-ref
  (setq
   bibtex-completion-notes-path org_notes
   bibtex-completion-bibliography zot_bib
   bibtex-completion-pdf-field "file"
   bibtex-completion-notes-template-multiple-files
   (concat
    "#+TITLE: ${title}\n"
    "#+ROAM_KEY: cite:${=key=}\n"
    "* TODO Notes\n"
    ":PROPERTIES:\n"
    ":Custom_ID: ${=key=}\n"
    ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
    ":AUTHOR: ${author-abbrev}\n"
    ":JOURNAL: ${journaltitle}\n"
    ":DATE: ${date}\n"
    ":YEAR: ${year}\n"
    ":DOI: ${doi}\n"
    ":URL: ${url}\n"
    ":END:\n\n"
    )
   )
)
#+END_SRC
*** Org-Ref
#+begin_src emacs-lisp
(use-package! org-ref
    ;; :init
    ; code to run before loading org-ref
    :config
    (setq
         org-ref-completion-library 'org-ref-ivy-cite
         org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
         org-ref-default-bibliography (list zot_bib)
         org-ref-bibliography-notes (concat org_notes "/bibnotes.org")
         org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
         org-ref-notes-directory org_notes
         org-ref-notes-function 'orb-edit-notes
    )
     (defun pkn/org-ref-open-in-scihub ()
    "Open the bibtex entry at point in a browser using the url field or doi field.
Not for real use, just here for demonstration purposes."
    (interactive)
    (let ((doi (org-ref-get-doi-at-point)))
      (when doi
        (if (string-match "^http" doi)
            (browse-url doi)
          (browse-url (format "http://sci-hub.se/%s" doi)))
        (message "No url or doi found"))))
     (add-to-list 'org-ref-helm-user-candidates '("Open in Sci-hub" . org-ref-open-in-scihub))
     )
#+end_src
*** Org-Roam-Bibtex
Will also setup the ~org-roam-bibtex~ thing here.
As foretold in the last line, there are more settings for [[https://github.com/Zaeph/org-roam-bibtex][ORB]]. The template is
modified from [[https://github.com/zaeph/org-roam-bibtex/issues/4][here]].
#+begin_src emacs-lisp :tangle yes
 (use-package! org-roam-bibtex
  :after (org-roam)
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (setq org-roam-bibtex-preformat-keywords
   '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "literature/${slug}"
           :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}

- tags ::
- keywords :: ${keywords}

\n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"

           :unnarrowed t))))
#+end_src
* TOOLS
** pdf
#+begin_src emacs-lisp :tangle yes
(setq org-file-apps
  '((auto-mode . emacs)
    ("\\.mm\\'" . default)
    ("\\.x?html?\\'" . default)
    ("\\.pdf\\'" . emacs) ;; another option: "okular --unique file:%s"
    ("\\.png\\'" . viewnior)
    ("\\.jpg\\'" . viewnior)
    ))
#+end_src
